# -*- coding: utf-8 -*-
"""tumor_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Shivansh1205/tumor-detection-ml-model/blob/main/tumor_detection.ipynb
"""

# Tumor Detection with Logistic Regression
# Based on Andrew Ng's Coursera Machine Learning Assignment
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Load Data
data = pd.read_csv('ex2data1.csv')
X = data.iloc[:, 0:2].values   # first 2 columns
y = data.iloc[:, 2].values     # 3rd column


# Plot Data
def plot_data(X, y):
    pos = y == 1
    neg = y == 0
    plt.figure(figsize=(8,6))
    plt.scatter(X[pos, 0], X[pos, 1], c='b', marker='+', label='Malignant')
    plt.scatter(X[neg, 0], X[neg, 1], c='y', edgecolors='k', label='Benign')
    plt.xlabel('Tumor Size')
    plt.ylabel('Tumor Texture')
    plt.legend()
    plt.grid(True)
    plt.title("Tumor Data")
    plt.show()

plot_data(X, y)

# Add intercept term
X_with_intercept = np.hstack((np.ones((X.shape[0], 1)), X))

# Define sigmoid function
def sigmoid(z):
    return 1 / (1 + np.exp(-z))

# Train logistic regression model
model = LogisticRegression()
model.fit(X, y)

print("Data shape:", data.shape)
print("Unique labels:", np.unique(y))

# Try with comma
try:
    data = data = pd.read_csv('ex2data1.csv')
except:
    # Try with space
    data = data = pd.read_csv('ex2data1.csv')
# Show preview
print("First 5 rows:\n", data[:5])
X = data.iloc[:, 0:2].values   # first 2 columns
y = data.iloc[:, 2].values     # 3rd column


print("Unique y labels:", np.unique(y))

# Plot decision boundary
def plot_decision_boundary(model, X, y):
    plot_data(X, y)
    x_min, x_max = X[:, 0].min()-2, X[:, 0].max()+2
    y_min, y_max = X[:, 1].min()-2, X[:, 1].max()+2
    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 100),
                         np.linspace(y_min, y_max, 100))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    plt.contour(xx, yy, Z, levels=[0.5], linewidths=2, colors='g')
    plt.title("Decision Boundary")
    plt.xlabel("Tumor Size")
    plt.ylabel("Tumor Texture")
    plt.show()

plot_decision_boundary(model, X, y)

# Predict for a new example
example = np.array([[45, 85]])
prob = model.predict_proba(example)[0][1]
print(f"Probability that tumor is malignant (size 45, texture 85): {prob:.4f}")

# Accuracy on training set
y_pred = model.predict(X)
accuracy = accuracy_score(y, y_pred) * 100
print(f"Training Accuracy: {accuracy:.2f}%")

# Accuracy on training set
y_pred = model.predict(X)
accuracy = accuracy_score(y, y_pred) * 100
print(f"Training Accuracy: {accuracy:.2f}%")

import pickle

# Pickle the model
filename = 'logistic_regression_model.pkl'
pickle.dump(model, open(filename, 'wb'))

print(f"Model pickled and saved as {filename}")